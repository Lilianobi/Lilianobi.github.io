import { Action } from "./CometChatMessageComposer";
import { Group, GroupMembersRequestBuilder, User, UsersRequestBuilder } from "@cometchat/chat-sdk-javascript";
import React from "react";
import { CometChatMentionsFormatter } from "../../formatters/CometChatFormatters/CometChatMentionsFormatter/CometChatMentionsFormatter";
import { CometChatTextFormatter } from "../../formatters/CometChatFormatters/CometChatTextFormatter";
import { UserMemberListType } from "../../Enums/Enums";
type Args = {
    dispatch: React.Dispatch<Action>;
    mySetAddToMsgInputText: (text: string) => void;
    errorHandler: (error: unknown, source?: string) => void;
    pasteHtmlAtCaret: (text: string) => void;
    textFormatters: Array<CometChatTextFormatter>;
    disableMentions: boolean;
    textFormatterArray: Array<CometChatTextFormatter>;
    mentionsTextFormatterInstanceRef: React.MutableRefObject<CometChatMentionsFormatter>;
    setTextFormatters: React.Dispatch<React.SetStateAction<CometChatTextFormatter[]>>;
    CometChatUIKitLoginListener: any;
    group: CometChat.Group | undefined;
    user: CometChat.User | undefined;
    userPropRef: React.MutableRefObject<User | undefined>;
    groupPropRef: React.MutableRefObject<Group | undefined>;
    setShowListForMentions: Function;
    searchMentions: Function;
    mentionsFormatterInstanceId: string;
    setUsersRequestBuilder: React.Dispatch<React.SetStateAction<UsersRequestBuilder | undefined>>;
    setGroupMembersRequestBuilder: React.Dispatch<React.SetStateAction<GroupMembersRequestBuilder | undefined>>;
    setUserMemberListType: React.Dispatch<React.SetStateAction<UserMemberListType | undefined>>;
    textInputRef: React.MutableRefObject<any>;
    createPollViewRef: React.MutableRefObject<any>;
    setSelection: Function;
    getComposerId: Function;
    parentMessageIdPropRef: any;
    emptyInputField: Function;
    propsText: string | undefined;
    currentSelectionForRegex: React.MutableRefObject<any>;
    currentSelectionForRegexRange: React.MutableRefObject<any>;
    text: string;
    getCurrentInput: Function;
    isPartOfCurrentChatForUIEvent: (message: CometChat.BaseMessage) => boolean | undefined;
};
export declare function useCometChatMessageComposer(args: Args): void;
export {};
