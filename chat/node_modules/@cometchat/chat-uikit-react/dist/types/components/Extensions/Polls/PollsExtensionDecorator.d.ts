import { DataSourceDecorator } from "../../../utils/DataSourceDecorator";
import { DataSource } from "../../../utils/DataSource";
import { PollsConfiguration } from "./PollsConfiguration";
import { MessageBubbleAlignment } from "../../../Enums/Enums";
import { CometChatMessageComposerAction, CometChatMessageTemplate } from "../../../modals";
/**
 * The PollsExtensionDecorator class extends the DataSourceDecorator to
 * handle custom poll messages in the CometChat UI.
 */
export declare class PollsExtensionDecorator extends DataSourceDecorator {
    /** The currently logged-in user. */
    private loggedInUser;
    /** Configuration for the polls extension. */
    configuration?: PollsConfiguration;
    /** The data source used by this decorator. */
    newDataSource: DataSource;
    /**
     * Constructs a PollsExtensionDecorator instance.
     * @param dataSource - The data source to decorate.
     * @param configuration - Optional configuration for the polls extension.
     */
    constructor(dataSource: DataSource, configuration?: PollsConfiguration);
    /**
     * Fetches the currently logged-in user.
     */
    getLoggedInUser(): Promise<void>;
    /**
     * Gets the unique ID of this decorator.
     * @returns The ID of the decorator.
     */
    getId(): string;
    /**
     * Retrieves all message types, including the poll message type if not already present.
     * @returns An array of message types.
     */
    getAllMessageTypes(): string[];
    /**
    * Retrieves all message categories, including the custom message category if not already present.
    * @returns An array of message categories.
    */
    getAllMessageCategories(additionalConfigurations?: Object | undefined): string[];
    /**
    * Checks if a template of a specific type exists.
    * @param template - The array of message templates.
    * @param type - The type of the template to check.
    * @returns True if the template exists, false otherwise.
    */
    checkIfTemplateExist(template: CometChatMessageTemplate[], type: string): boolean;
    /**
     * Retrieves all message templates, including the polls template if not already present.
     * @param _theme - Optional theme to apply.
     * @param additionalConfigurations - Optional additional configurations.
     * @returns An array of message templates.
     */
    getAllMessageTemplates(additionalConfigurations?: any): CometChatMessageTemplate[];
    /**
    * Creates a template for poll messages.
    * @param _theme - The theme to apply to the template.
    * @returns A CometChatMessageTemplate for polls.
    */
    getPollsTemplate(): CometChatMessageTemplate;
    /**
      * Generates the content view for a poll message.
      * @param message - The poll message.
      * @param _theme - The theme to apply.
      * @returns The content view for the poll message.
      */
    getPollsContentView(message: CometChat.CustomMessage, alignment?: MessageBubbleAlignment): import("react/jsx-runtime").JSX.Element;
    /**
     * Retrieves specific data from a poll message.
     * @param message - The poll message.
     * @param key - The key to retrieve data for.
     * @returns The requested data or the sender's UID if no key is specified.
     */
    getPollBubbleData(message: CometChat.CustomMessage, key?: string): any;
    /**
     * Retrieves the attachment options for the poll extension.
     * @param theme - The theme to apply.
     * @param id - The ID for the attachment options.
     * @returns An array of message composer actions.
     */
    getAttachmentOptions(id: any, additionalConfigurations?: any): CometChatMessageComposerAction[];
    /**
     * Handles the click event for the polls button in the message composer.
     * Opens the poll creation modal with pre-defined styles.
     *
     * @param theme - The current theme settings for the application.
     * @param args - Additional arguments passed during the button click.
     */
    onPollsButtonClicked(...args: any[]): void;
    /**
     * Constructs the poll creation view with the given user and group details.
     *
     * @param user - The user who is creating the poll.
     * @param group - The group in which the poll is being created.
     * @param createPollStyle - Style configurations for the poll creation modal.
     * @returns JSX element representing the poll creation modal.
     */
    getPollView(user: CometChat.User, group: CometChat.Group): import("react/jsx-runtime").JSX.Element;
    /**
    * Triggers the event to close the poll creation modal.
    */
    triggerCloseEvent(): void;
    /**
    * Retrieves the last message in a conversation and checks if it is a poll message.
    *
    * @param conversation - The conversation from which to retrieve the last message.
    * @param loggedInUser - The currently logged-in user.
    * @param additionalConfigurations - Any additional configurations to be used.
    * @returns The localized string for a poll message if it exists, otherwise a default string.
    */
    getLastConversationMessage(conversation: CometChat.Conversation, loggedInUser: CometChat.User, additionalConfigurations?: any): string;
}
